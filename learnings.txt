**********************************************************************************************************************************************************************
				General Questions
What's the max Records we can show on Visualforce Page & how can we increase the size?
Ans. : Max 1000 Records. However, List<> can contain more than 1000, but hen used in conjunction with dataTable,pagrBlockTable , repeat the limit is 1000 to keep the view state size optimal.
For the page tag we can enable readOnly attribute value as true so that -
Number of query rows will increased from 50000 to 1 million rows.
Number of records displayed on VF page will be increased from 1000 to 10000

Use the transient keyword to declare instance variables that can't be saved, and shouldn't be transmitted as part of the view state for a Visualforce page.
Declaring variables as transient reduces view state size. A common use case for the transient keyword is a field on a Visualforce page that is needed only for the duration of a page request, 
but should not be part of the page's view state and would use too many system resources to be recomputed many times during a request.

Some Apex objects are automatically considered transient, that is, their value does not get saved as part of the page's view state. These objects include the following:
PageReferences
XmlStream classes
Collections automatically marked as transient only if the type of object that they hold is automatically marked as transient, such as a collection of Savepoints
Most of the objects generated by system methods, such as Schema.getGlobalDescribe.
JSONParser class instances.

The following is a list of commonly encountered Visualforce performance issues and their possible solutions:
A) VIEW STATE SIZE
The view state size of your Visualforce pages must be under 135 KB. By reducing your view state size, your pages can load quicker and stall less often.
Monitor View State Performance through "Development Mode Footer" and take following Actions :
1. Use the transient keyword in your Apex controllers for variables that aren’t essential for maintaining state and aren’t necessary during page refreshes.
2. If you notice that a large percentage of your view state comes from objects used in controllers or controller extensions, consider refining your SOQL calls to return only data that's relevant to the Visualforce page.
3. If your view state is affected by a large component tree, try reducing the number of components your page depends on.

B) LOAD TIME
Large page sizes directly affects load times. To improve Visualforce page load times:
1. Cache any data that is frequently accessed, such as icon graphics.
2. Avoid SOQL queries in your Apex controller getter methods.
3. Reduce the number of records displayed on a page by:
	Limiting the data coming back from SOQL calls in your Apex controllers. For example, using AND statements in your WHERE clause, or removing null results
	Taking advantage of pagination with a list controller to present fewer records per page.

WHAT IS AURA DEFINITION BUNDLE
Aura definition bundle contains following items

Component : UI for lightning component
controller.js : Contains client-side controller methods to handle events in the component.
helper.js: JavaScript functions that can be called from any JavaScript code in a component’s bundle
style: Contains styles for the component.
design: File required for components used in Lightning App Builder, Lightning pages, or Community Builder.
renderer: Client-side renderer to override default rendering for a component.
documentation: A description, sample code, and one or multiple references to example components
SVG: Custom icon resource for components used in the Lightning App Builder or Community Builder.

What is the use of Document and Rendrer in lightning component?
Document: – A description, sample code, and one or multiple references to example components
Client-side renderer to override default rendering for a component.

How to ensure FLS while working with Lightning Component?
Lightning Data Services already ensures Field Level Security and we can also use into the Apex using isAccessible, isCreateable, isDeleteable, isCreateable and etc methods of Schema class.



**********************************************************************************************************************************************************************
Action Support : A component that adds AJAX support to another component, allowing the component to be refreshed asynchronously by the server when a particular event occurs, 
such as a button click or mouseover.

<!--  Page: -->
<apex:page controller="exampleCon">
    <apex:form>
        <apex:outputpanel id="counter">
            <apex:outputText value="Click Me!: {!count}"/>
            <apex:actionSupport event="onclick" 
                                action="{!incrementCounter}" 
                                rerender="counter" status="counterStatus"/>
        </apex:outputpanel>
        <apex:actionStatus id="counterStatus" 
                           startText=" (incrementing...)" 
                           stopText=" (done)"/>
    </apex:form>
</apex:page>	

/***  Controller: ***/
public class exampleCon {
    Integer count = 0;
                        
    public PageReference incrementCounter() {
            count++;
            return null;
    }
                    
    public Integer getCount() {
        return count;
    }
}

action : The action method invoked by the AJAX request to the server. Use merge-field syntax to reference the method. For example, action="{!incrementCounter}" references the 
			incrementCounter() method in the controller. If an action is not specified, the page simply refreshes.
rendered : A Boolean value that specifies whether the component is rendered on the page. If not specified, this value defaults to true.
reRender (object) : The ID of one or more components that are redrawn when the result of an AJAX update request returns to the client. This value can be a single ID, 
					a comma-separated list of IDs, or a merge field expression for a list or collection of IDs.

**********************************************************************************************************************************************************************

Action Function : 
A component that provides support for invoking controller action methods directly from JavaScript code using an AJAX request. An <apex:actionFunction> component must be a child 
of an <apex:form> component. Because binding between the caller and <apex:actionFunction> is done based on parameter order, ensure that the order of <apex:param> is matched by the 
caller's argument list.

Unlike <apex:actionSupport>, which only provides support for invoking controller action methods from other Visualforce components, <apex:actionFunction> defines a new JavaScript 
function which can then be called from within a block of JavaScript code.

<!-- Page: -->
<apex:page controller="exampleCon">
    <apex:form>
        <!-- Define the JavaScript function sayHello-->
        <apex:actionFunction name="sayHello" action="{!sayHello}" rerender="out" status="myStatus"/>
    </apex:form>

    <apex:outputPanel id="out">
    <apex:outputText value="Hello "/>
    <apex:actionStatus startText="requesting..." id="myStatus">
        <apex:facet name="stop">{!username}</apex:facet>
    </apex:actionStatus>
    </apex:outputPanel>
            
    <!-- Call the sayHello JavaScript function using a script element-->
    <script>window.setTimeout(sayHello,2000)</script>
            
    <p><apex:outputText value="Clicked? {!state}" id="showstate" /></p> 
            
    <!-- Add the onclick event listener to a panel. When clicked, the panel triggers
    the methodOneInJavascript actionFunction with a param -->
    <apex:outputPanel onclick="methodOneInJavascript('Yes!')" styleClass="btn"> 
        Click Me 
    </apex:outputPanel>
    <apex:form>

    <apex:actionFunction action="{!methodOne}" name="methodOneInJavascript" rerender="showstate">
        <apex:param name="firstParam" assignTo="{!state}" value="" />
    </apex:actionFunction>
    </apex:form>
</apex:page>

/*** Controller ***/
public class exampleCon {
    String uname;

    public String getUsername() {
        return uname;
    }
            
    public PageReference sayHello() {
        uname = UserInfo.getName();
        return null;
    }
            
    public void setState(String n) {
        state = n;
    }
            
    public String getState() {
        return state;
    }
            
    public PageReference methodOne() {
        return null;
    }
            
    private String state = 'no';
}

********************************************************************************************************************************
actionPoller : A timer that sends an AJAX request to the server according to a time interval that you specify. Each request can result in a full or partial page update.
Interval : This value must be 5 seconds or greater, and if not specified, defaults to 60 seconds. Note that the interval is only the amount of time between update requests. 
Once an update request is sent to the server, it enters a queue and can take additional time to process and display on the client.
timeout : 	The amount of time (in milliseconds) before an AJAX update request should time out.
<apex:page controller="exampleCon">
    <apex:form>
        <apex:outputText value="Watch this counter: {!count}" id="counter"/>
        <apex:actionPoller action="{!incrementCounter}" reRender="counter" interval="15"/>
    </apex:form>
</apex:page>

********************************************************************************************************************************
apex:actionRegion : An area of a Visualforce page that demarcates which components should be processed by the Lightning Platform server when an AJAX request is generated. 
Only the components in the body of the <apex:actionRegion> are processed by the server, thereby increasing the performance of the page.

********************************************************************************************************************************
						WorkFlow Rules
types of Actions :
1. Immediate
2. Time Triggered

Following are the Actions :
1. Email Alert
2. Field Update
3. Task : Task to be assigned to someother user after some work.
4. Outbound Message : It is used to send message to onto External Applications which are connected to Salesforce.

Limitations :
1. Only have four types of actions.
2. Can't create a record of another object after updating a field on one object. Solution is Process builder.
3. It starts only when a record is created or edited.
4. We can have more than one workflow rule on a single object but we can't determine which one would run first.
5. Can't have same workflow more than one object.


So, better use Process builder. Listen better last 5-6 mins.
********************************************************************************************************************************
					Process Builder
Actions in Process Builder :
Apex
Create a Record
Email Alerts
Flows
Post to chatter
Processes
Quick Actions
Submit for Approval
Update Records

********************************************************************************************************************************
					Approval Process
Perform Automation to get approval for the records
Steps :
1. Select the object standard/Custom
2. Specify the entry criteria
3. Select Approver
4. Select Email Templates
5. Select fields to display on Approval Page Layout
6. Initial Submission
7. Approval
8. Rejection
9. Recall					

********************************************************************************************************************************
					Organisation Level Security

Four Type of Org Security :					
1. Password Managing Policy - Min length required, Password should contain alphanumeric, alphabets, numbers policy.
							How many invalid attemps are allowed after that Lockout period Policy. (15 min -30min, 1 day depends on u.)
							Who can unlock ur user (sys admin)
							
2. Restricting login based on Location : Using IP Range. IP range can be set on Org level or Profile level.
3. Restricting login based on time : 
4. Restrictng user based on Email Domain.

Health Check Tool : It provides details about your org in terms of security.

********************************************************************************************************************************
					Object Level Security
In this level of Security, We prevent users or group of users from creating,viewing,editing or deleting records of an object by setting permission on that object.
Two Ways of Setting Object Permission :
1. Profiles : It's a collection of settings(e.g. which app or tab user can see) & permissions (e.g. which object record user will be see or create) that determine which data & features in the platform users have access to.
Profile Controls :
Object Permission, Field Permission, User Permission, Tab Settings, App Settings, Apex Class Access, Visualforce Access, Record Type, Page Layout, Login Hours, Login IP Ranges

Types of Profiles :
1. Standard Profile : Standard User, Read Only, System Administrator, Marketing User, Contract Manager, Solution Manager
2. Custom Profile : Can be made by cloning Standard Profile.

User License : It determines which feature this user would have access to.
E.g. Chatter free user license would have access only up to related to chatter files but Salesforce User License would have access to everything in the salesforce.

Every profile should have atleast one visible app.


2. Permission Sets : It's a collection of settings(e.g. which app or tab user can see) & permissions (e.g. which object record user will be see or create) that determine which data & features in the platform users have access to.

These are used to extend the access or grant additional access to users without modifying their existing profile.
Permission sets are additive which means we can't remove a user's existing permission which they have through their profile by assigning a permission set with less access. We can only add permission.

Profile Controls :
Object Permission, Field Permission, User Permission, Tab Settings, App Settings, Apex Class Access, Visualforce Access, Record Type

Permission sets are also based on license type but it's not compulsory but once we assign license type to a permission set then it can't be changed.
In Permission sets, we can't control page layout assignment.


Difference :
Profile have most restrictive settings and permission a user assigned to this profile would have whereas Permission sets extend the access to settings and permission provided by
the profile.
A user can have only one profile whereas a user can have multiple permission sets.
Profiles are restrictive but Permission sets are additive.
Every user must have a profile but not necessary to have permission set.


********************************************************************************************************************************
					Field Level Security
It controls whether a user can see or edit the value for a particular field on an object.
It secures the visibility of fields in any part of the app including related list, list views, reports & search results which can't be secured through pagelayouts.

It can be implemented on Profiles & Permission Sets.

Universally required fields appear on the edit pagee regardless of the field level security.
Roll up summary & formula fields are read only on detail pages and not available on edit pages and they can also show the field values of referenced fields that user can't see.

********************************************************************************************************************************
					Record Level Security
It determines which individual records user can see or edit in the object they have access to in their profile.

Access Levels in Record Level Security :
Public Read/Write
Public Read only
Private

Access opens up as follows :
OWD --> Role Hierarchy --> Sharing Rules --> Manual Sharing

Object Level & Record Level Security combine matters to see the records.
Whichever is more restrictive, wins.

OWD (Organisation Wide Default) : It determines the baseline level of access for all the records of an object.
It should be most restrictive access in Record Level Security because other level security implementations only grant additional access, they can't restrict the access.

Use of Role Hierarchy : Managers will always have access to records of his/her subordinates.
Users who tend to need access to the same type of records can be grouped together.

Role Hierarchy can be enabled by Checking on "Grant Access using Hierarchies" on custom object.
User above in Role Hierarchy will always have access of the same below in the hierarchies.
"Grant Access using Hierarchies" checkbox is checked for all the objects by default & it can be unchanged only for the custom objects. We can't unchecked Role Hierarchy for Standard Object.

Sharing Rules : It is automatic exceptions to the OWD settings for users who doesn't own the record.
It should be created only for objects whose OWD is set public read only or private because sharing rules can only extend the access they can't restrict the access.

Two Types of Sharing Rules on which records needs to be shared :
1. Owner Based Sharing Rules
2. Criteria Based Sharing Rules.

While sharing to other user, We don't have "Private" option in dropdown as Access opens up in flow. Means upper level from OWD can't restrict access, then can only extend access.

Manual Sharing : Sharing records individually with other users using the share button on the record. 
Use it when : 
It is not possible to define a consistent group of users who needs access.
It is not possible to share records on other.

Who is eligible for Manual Sharing :
1. Record's Owner.
2. A user in a role above the owner.
3. User granted full access to the record.
4. System Administrator.

Manual Sharing button is not available in Lightning yet. This is one of the limitation in lightning.

Manual Sharing button is not visible on the Record. What's the meaning of this?
Because OWD is Public Read/Write for that Object. It means it is already shared with all the users with the permission of Public Read/Write.

****************************************************************************************************************************************************************
					External Id in Salesforce
It is a custom field that has the "External Id" attribute checked meaning that it contains unique record identifiers outside the salesforce.
If Record Id is not present in Data outside of Salesforce then we External Id comes in picture.
So, If we are upserting or updating a record from the external system, then we can select "External Id" as Unique Identifier and based on that update & upsert process begins.

Limitations :
1. Only fields with datatype Auto Number, Email, Number & Text can be marked as External Id.
2. An Object can have at most 7 external Id Type.
3. Custom Fields marked as unique(No Duplicate) also count against an object's limit of 7 external Id fields.
unique fields + External Id fields <= 7

****************************************************************************************************************************************************************
					Cross Object Formula Field in Salesforce
Custom Formula Field :
1. Only refers fields of object on which it is created.
2. Can be used in other custom formula field & cross object formula field.

Cross Object Formula Field :
1. Refers fields of Related Object Also.
2. Can't be used in other custom formula field.
1. Object A & B can be Master-Detail or Lookup.
2. Can refer fields upto 10 relationship away but can be increased to 15 by contacting to Salesforce support.
3. It bypasses security & sharing settings. E.g. If we have COFF on case object of Account Record but we don't have acess to Account object even though it would show the data.
4. COFF can't be referred into roll up summary field whereas custom formula field can be.
5. COFF is referred only from child-master or parent side.
****************************************************************************************************************************************************************
					Roll up summary Field in Salesforce
It can be created only in case of Master-Detail Relationship & created only on Master Record.
It summarize the data from a set of related detail records & automatically displays the record on the master record.
Operations :
Sum of a field value on child records.
SUM - Number,Currency,Percentage 
MAX - All of above including Date, Datetime
MIN - All of above including Date, Datetime
COUNT

Accounts with Opportunity & Campaign with Campaign Members
QUEUE :
Queues help your teams to manage service contracts, cases, leads and custom objects. Once records are placed in a queue manually or through an automatic case or lead assignment
 rule, records remain there until they're assigned to a user or taken by one of the queue members.
Auto Response Rule : An auto-response rule is a set of conditions for sending automatic email responses to lead or case submissions based on the attributes of the submitted record. 
Applicable leads include those captured through a Web-to-Lead form.
Escalation rules automatically escalate cases when the case meets the criteria defined in the rule entry. You can create rule entries, which define criteria for escalating a case, 
and escalation actions, which define what happens when a case escalates. Available in: Salesforce Classic and Lightning Experience.
****************************************************************************************************************************************************************
					VLOOKUP in Salesforce
Suppose we want to stop creating duplicate records for an Object.(Employee)
Options :
1. Create Apex Trigger : Create an Apex Trigger(before Insert, before Update)
2. Add a Validation Rule : Here we use VLOOKUP.
 Name = VLOOKUP(
(1) $ObjectType.Employee__c.Fields.Name ,  
(2) $ObjectType.Employee__c.Fields.Name ,  
(3) Name)
VLOOKUP(field_to_return, field_on_lookup_object, lookup_value)
Points to Remember:
VLOOKUP only available on Custom Objects.
VLOOKUP only available in Validation Rules.
VLOOKUP can only be done on the Name fields.
The field_to_return must be an auto number, roll-up summary, lookup relationship, master-detail relationship, checkbox, date, date/time, email, number, percent, phone, picklist, text, text area, or URL field type.
The field_on_lookup_object must be the Record Name field on a custom object.
The field_on_lookup_object and lookup_value must be the same data type. 
****************************************************************************************************************************************************************
StandardSetController Class : StandardSetController objects allow you to create list controllers similar to, or as extensions of, the pre-built Visualforce list controllers provided by Salesforce.
****************************************************************************************************************************************************************
				Salesforce Editions & Sandboxes
Sandbox :
Developer : 200mb data Limit. 200mb File Storage Limit. Refreshes Every Day.
Developer Pro : 1gb data Limit. 1gb File Storage Limit. Refreshes Every Day.
Partial Copy : 5gb data Limit. 25gb File Storage Limit. Refreshes Every 5 Day interval.
Full Copy : Storage similar to production Org. Refreshes Every 29 days interval.

Note(If Delete Sandbox) :You can refresh a Full sandbox 29 days after you created or last refreshed it. If you delete a Full sandbox within those 29 days, 
you need to wait until after the 29 day period, from the date of last refresh or creation, to replace it.

Performance Edition includes licenses for 1 Full sandbox, 1 Partial Copy sandbox, 5 Developer Pro sandboxes, and 30Developer sandboxes.
Data storage : 20mb per user
File storage : 612mb per user
Maximum Custom Application : 5

Enterprise Edition includes a license for 1 Developer sandbox.
Data storage : 20mb per user
File storage : 2gb per user
Maximum Custom Application : 10

Unlimited Edition includes licenses for 1 Full sandbox, 5 Developer Pro sandboxes, and 15 Developer sandboxes.
Data storage : 120mb per user
File storage : 2gb per user
Maximum Custom Application : Unlimited
****************************************************************************************************************************************************************
					RecordTypes in Salesforce
It controls pagelayouts & picklist value of an object which will be visible/available to different users while creating a record of that particular object.

****************************************************************************************************************************************************************
1. Write Query to get All the Accounts not having any contact.
2. Write Query to get All the accounts having duplicate name.
3. Get 2nd to 5th highest Amount Opportunity
****************************************************************************************************************************************************************
					Triggers and Order of Execution (Flow Of Execution)

When a record is saved with an insert, update, or upsert statement, the following events occur in order:

The original record is loaded from the database
System Validation Rules.
Executes all before triggers.
Custom Validation rules.
Executes all after triggers.
Executes assignment rules.
Executes auto-response rules.
Executes workflow rules.
If there are workflow field updates, updates the record again.
If the record was updated with workflow field updates, fires before and after triggers one more time. Custom validation rules are not run again.
Executes escalation rules.
If the record contains a roll-up summary field or is part of a cross-object workflow, performs calculations and updates the roll-up summary field in the parent record. Parent record goes through save procedure.
If the parent record is updated, and a grand-parent record contains a roll-up summary field or is part of a cross-object workflow, performs calculations and updates the roll-up summary field in the parent record. Grand-parent record goes through save procedure.
Executes Criteria Based Sharing evaluation.
Commits all DML operations to the database.
Executes post-commit logic. Ex: Sending email.

Additional Considerations

Please note the following when working with triggers:

* When Enable Validation and Triggers from Lead Convert is selected, if the lead conversion creates an opportunity and the opportunity has Apex before triggers associated with it, 
the triggers run immediately after the opportunity is created, before the opportunity contact role is created. For more information, see “Customizing Lead Settings” in the Salesforce 
online help.
* If you are using before triggers to set Stage and Forecast Category for an opportunity record, the behavior is as follows:
o If you set Stage and Forecast Category, the opportunity record contains those exact values.
o If you set Stage but not Forecast Category, the Forecast Category value on the opportunity record defaults to the one associated with trigger Stage.
o If you reset Stage to a value specified in an API call or incoming from the user interface, the Forecast Category value should also come from the API call or user interface. 
If no value for Forecast Category is specified and the incoming Stage is different than the trigger Stage, the Forecast Category defaults to the one associated with trigger Stage. 
If the trigger Stage and incoming Stage are the same, the Forecast Category is not defaulted.


****************************************************************************************************************************************************************
						STATEFUL BATCH
select Id, Name from Account where Id not IN (select accountId from Contact)
select Name, count(id) from Contact group by Name having count(id) > 1 OR select Name, count(id) from Contact group by Name having count(name) > 1 
SELECT Amount FROM Opportunity order by amount desc LIMIT 4 offset 1

The only time you need Database.Stateful is when the execute method modifies a class variable in a way meant to be used across multiple execute methods or in the finish method. 
The majority of batches you will ever write will not need Database.Stateful. It's important to know that using Database.Stateful will harm your batch's performance, 
because the class will be serialized at the end of each execute method to update its internal state. This extra serialization results in longer execution time.

If you're ever not sure if you need it, simply ask yourself two questions: (1) "Does one execute method need data from a previous execute method?", and 
(2) "Does the finish method need data from any previous execute method?" If the answer to both of these questions is no, then you do not need Database.Stateful. 
If the answer is yes, then you may want to use Database.Stateful. Keep in mind that there are alternative means to using Database.Stateful, such as storing data in a Custom Setting, 
which may offer better performance in some cases.

Apex Class: – 100 Callouts in a Single Transaction
Apex Batch: – The start, execute, and finish methods can implement up to 100 callouts each.
Static variables :- Static variables are class level variable and will persist their values in the entire transaction. Can be accessed directly with the class name.

Variable	Usage
isExecuting	Returns true if the current context for the Apex code is a trigger, not a Visualforce page, a Web service, or an executeanonymous() API call.
isInsert	Returns true if this trigger was fired due to an insert operation, from the Salesforce user interface, Apex, or the API.
isUpdate	Returns true if this trigger was fired due to an update operation, from the Salesforce user interface, Apex, or the API.
isDelete	Returns true if this trigger was fired due to a delete operation, from the Salesforce user interface, Apex, or the API.
isBefore	Returns true if this trigger was fired before any record was saved.
isAfter		Returns true if this trigger was fired after all records were saved.
isUndelete	Returns true if this trigger was fired after a record is recovered from the Recycle Bin (that is, after an undelete operation from the Salesforce user interface, Apex, or the API.)
new	Returns a list of the new versions of the sObject records.
This sObject list is only available in insert, update, and undelete triggers, and the records can only be modified in before triggers.

newMap	A map of IDs to the new versions of the sObject records.
This map is only available in before update, after insert, after update, and after undelete triggers.

old	Returns a list of the old versions of the sObject records.
This sObject list is only available in update and delete triggers.

oldMap	A map of IDs to the old versions of the sObject records.
This map is only available in update and delete triggers.

size	The total number of records in a trigger invocation, both old and new.

****************************************************************************************************************************************************************
				Einstein Salesforce
Lots of Data + Cloud Computing + Good Data Models = smarter Applications
Big Data + Processing Power + Data Models = Artificial Intelligence (AI)
AI makes easier for us to interact with the apps that we’re already using every day by understanding our patterns. Said another way, AI is doing the work for us, 
so that we can use technology *without using technology* to become more connected to experiences that matter.

Service, Sales, and Marketing Love AI :
AI has benefits for all parts of the business. Sales reps no longer have to enter sales data manually. Marketers no longer have to use manual A/B testing to select the best 
social media images for their next campaign. And customer service managers no longer have to sift through long lists of incoming service calls to prioritize their time.

Examples :
Sales
	Automatically capture sales activities
	Automatically log customer data
	Suggest next-best actions and recommended email responses
Service
	Automatically classify and route cases
	Recommend solutions and knowledge articles
	Self-service communities and automated assistants
Marketing
	Automatically score likelihood to open an email or subscribe to a newsletter
	Deliver the next best product, content, or offer
	Send messages at the right time, when a customer is most likely to engage

AI is about building intelligent computer programs that carry out tasks like:
Visual perception
Speech recognition
Sentiment analysis
For example, self-driving cars require computers to have visual perception capabilities, and voice-activated applications like Siri require computers to have speech recognition capabilities.	

The brains behind AI include modeling techniques such as machine learning, deep learning, and natural language processing.

Machine Learning for AI :
Machine learning is the core driver of AI. It’s the process of using algorithms to tell you something interesting about your data without writing code specific to the problem 
you’re trying to solve. Said differently, it’s a way to have computers learn from data with minimal programming. Instead of writing code, you feed a machine data and it builds its 
own logical function based on this data.

Deep Learning for AI :
the performance of machine learning algorithms can weaken when key information is buried in unstructured data. That’s where deep learning comes into play. 
It is great at automatically learning the best features from somewhat noisy data (read: unstructured) so that algorithms can learn more effectively. It also:
 1. Uses complex algorithms to perform tasks in domains where it actually learns the domain with little or no human supervision.
 2. Learns how to learn. For example, consumer apps like Google use deep learning to power facial recognition in photos.

Natural Language Processing (NLP) for AI :
Natural language processing (NLP) is a form of machine learning that recognizes language and its many usage and grammar rules by finding patterns within large data sets. It also:
 1. Can perform sentiment analysis, where algorithms look for patterns in social media postings to understand how customers feel about a specific brand or product.
 2. Handles speech recognition, providing a text summary derived from “listening” to an audio clip of a human speaking.
 3. Conducts question answering, typically handling those questions with a specific answer (for example, What is the square root of 4?), but also exploring how to handle more complex and open-ended questions.
 
Einstein Logic : 
Capture-Learn-Connect (C-L-C)
Capture Data - Learn Data - Connect With Customers

****************************************************************************************************************************************************************
Benefits of Lightning platform over classic platform : 
1. With Lightning Experience, Salesforce now has many new cloud-based features and a new UI. Sales accounts, campaigns, contacts, leads, opportunities, personal accounts, 
price books and products have been re-organized and given a modern, visual appeal. The overall intent of the redesign is to make the data and tools more accessible so that 
Sales Reps can work more effectively and close deals faster with fewer clicks.



****************************************************************************************************************************************************************
Features that aren’t supported in Lightning Experience:
1. Custom JavaScript Buttons. Custom buttons that use a JavaScript content source aren’t supported in Lightning Experience. You can replace some of the functions covered by 
these buttons by using point-and-click tools, like Process Builder, Visual Workflow, or code-driven approaches.

2. AppExchange Apps with Custom Objects, Visualforce Pages, and More. Many apps from the AppExchange might not be supported. 
If they are supported, you'll see a Lightning Ready sash appear next to the app. 

****************************************************************************************************************************************************************
Display a Visual Summary with Kanban : The Kanban view displays a visual summary for a selection of records. By seeing all your records at once, 
you can more effectively monitor your work and keep deals moving forward.
E.g. Showing a record for any custom object have many options on that page.
The records in the Kanban view are based on the selected list view (1). Easily toggle between the list view grid view and the Kanban view 
(2). Filter your records to select a single record type or view a particular subset of your records (3). Search for records in the current view 
(4). Records are separated based on record type (5). Records are grouped into columns (6). Change how columns are organized and summarized using Kanban settings 
(7). Quickly move a record to a different column by dragging the card (8). For opportunities, alerts tell how to keep a deal on track, for example, create a task or event (9).

****************************************************************************************************************************************************************
					CPQ (Configure Price Quote)

					
					
					
					
					
					
					



PF :
Provident Fund:
Withdrawal of Provident Fund is not feasible if you are going to join another company. The PF amount will get transferred to your new employer upon linking the existing UAN number with your new ac-count.
 Incase you are moving out of the country or not planning to join any other company, then submit online withdrawal request only after 60 days from the date of leaving Mindtree - under Unified portal >>online services>>F-31/F-10C & 19 withdrawal.
 You should check your KYC first before applying online. Your PAN, Aadhaar should be in verified state under Manage >> KYC. Check the Bank account and IFSC code as your settlement will be done only to the bank details furnished under KYC
 Mindtree Limited www.mindtree.com
 For PF transfers – as mentioned above, you should get the UAN linked to new account. If your KYC is updated – PAN, Bank & Aadhaar details is verified, then auto transfer will take place within 2 months from the date of linking the account. If transfers do not reflect in the new statement, then under online services >> one employee one account >> fill up the details and submit to get the old PF transferred to new account.
 For any query related to PF withdrawals / Transfers / Corrections in Provident Fund records contact Mr.Baskaran B / Mrs. Suma T A at 080-23469369 / 080-45155052 Extn : 55052 or send email to mindtree@hrmcindia.com
 Mindtree is an un exempted establishment and PF is maintained under RPFC, SRO, RR Nagar,
Bangalore – 560098.
 Address of PF office – Employees Provident Fund organization, 570, Raja Rajeshwari Regency, Near R R Temple, 26th Cross, Ideal Home Co-operative layout, Mysore Road, Bangalore – 560098.
E-mail: sro.mysoreroad@epfindia.gov.in , contact number: 080-28603108

****************************************************************************************************************************************************************
					Lightning Web Components
1. lwc has mainly three files : Metadata, JavaScript, Templates
2. lwc use ECMAScript standards: modules, classes...
3. lwc use W3C standards : custom elements, templates, ....
4. Use @track to make a property reactive. [E.g. If u want to bind a field from template to JS file].


import statement indicates the JavaScript uses the LightningElement and track functionality from the lwc module.
import { LightningElement, track } from 'lwc';

These two pieces of imported functionality are quite different.
1. LightningElement is our base class for Lightning web components.
2. track is a decorator.

Decorators are often used in JavaScript to extend the behavior of a class, property, getter, setter, or method.
@api: Marks a property as public for use in your template or other components.
@track: Marks a property for internal monitoring. A template or function using this property forces a component to rerender when the property’s value changes. Use this to store values locally, especially as a user interacts with your component.
@wire: Gives you a way to get and bind data. This implementation simplifies getting data from a Salesforce org.

But, be aware, apply only one Lightning Web Component decorator to a property at a time. For example, a property can’t have @api (public reactive) and @track (private reactive) decorators at the same time.

The Lightning Web Component model provides methods that allow you to “hook” your code up to critical events in a component’s lifecycle. These events include when a component is:
Created
Added to the DOM
Rendered in the browser
Encountering errors
Removed from the DOM
Respond to any of these lifecycle events using callback methods. For example, the connectedCallback() is invoked when a component is inserted into the DOM. The disconnectedCallback() is invoked when a component is removed from the DOM.

Enable dev hub in ur dev org.
1. Set up environment.
2. Authenticate ur org : sfdx force:org:create -s -f config/project-scratch-def.json -a ebikes
3. Clone repository : git clone https://github.com/trailheadapps/ebikes-lwc
	cd ebikes-lwc
4. Create a scratch org and provide it with an alias (ebikes in the command below):
sfdx force:org:create -s -f config/project-scratch-def.json -a ebikes
//  Successfully created scratch org: 00D0l000000DY42EAG, username: test-8iwq2j5jtewo@example.com
5. Push the app to your scratch org:
sfdx force:source:push
6. Assign the ebikes permission set to the default user:
sfdx force:user:permset:assign -n ebikes
7. Load sample data:
sfdx force:data:tree:import --plan ./data/sample-data-plan.json
8. Open the scratch org:
sfdx force:org:open
9. In Setup, under Themes and Branding, activate the Lightning Lite theme.
10. In App Launcher, select the E-Bikes app.

<!-- todoApp.html -->
<template>
    <example-todo-wrapper>
        <example-todo-item item-name="Milk"></example-todo-item>
        <example-todo-item item-name="Bread"></example-todo-item>
    </example-todo-wrapper>
<template>

Owner : The owner is the component that owns the template. In this example, the owner is the example-todo-app component. The owner controls all the composed components that it contains. An owner can:
1. Set public properties on composed components
2. Call public methods on composed components
3. Listen for events dispatched by composed components

Container : A container contains other components but itself is contained within the owner component. In this example, example-todo-wrapper is a container. A container is less powerful than the owner. A container can:
1. Read, but not change, public properties in contained components
2. Call public methods on composed components
3. Listen for some, but not necessarily all, events bubbled up by components that it contains.

Parent and child : When a component contains another component, which, in turn, can contain other components, we have a containment hierarchy. A parent component contains a child component. A parent component can be the owner or a container.























































